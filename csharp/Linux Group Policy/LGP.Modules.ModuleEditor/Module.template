#!/usr/bin/perl -w

########################################################################################################
# @description Concrete Module Class ( Module ) extends Module
########################################################################################################

package {PACKAGE};

BEGIN 
{
    unshift( @INC, $ENV{'lgppath'} . "/client/config" );
	unshift( @INC, $ENV{'lgppath'} . "/client/distribution/" );
    unshift( @INC, $ENV{'lgppath'} . "/client/includes/" );
    unshift( @INC, $ENV{'lgppath'} . "/client/modules/" );
	unshift( @INC, $ENV{'lgppath'} . "/client/policies/" );
    unshift( @INC, $ENV{'lgppath'} . "/common/" );
}

use strict;
use base 'Module';

sub new 
{
	my( $class ) = @_;
	my $self = Module->new( @_ );
	bless( $self , $class );	

	return $self;
}

# 1. Observer Attach
sub registerGrammer
{
	my( $self ) = @_;
	
	# Register your grammer here
	# using the addGrammer method
	# $self->addGrammer
	# @param KEY
	# @param VALUE
}

# 2. Observer update
sub update
{
    my( $self , $actionEvent , $coordinator ) = @_; 
    
    $self->{ coordinator } = $coordinator;
    $self->{ actionEvent } = $actionEvent;
	
	if( $self->{ actionEvent }->getEventCode() eq "KEY" )
	{	
		#$self->handleKey();	
	}
}

# 3. Your concrete method
sub handleKey
{
	my( $self ) = @_;
	
	#print $self->{ actionEvent }->getEventOptions() . "\n";
}




1;
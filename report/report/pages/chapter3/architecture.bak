\section{Architecture}
	
	In the words of Martin Fowler, "The software industry delights in taking words and stretching them into a myriad of subtly contradictory meanings,
	one of the biggest suffers is 'architecture'" - \citet{FowlerPatternsArchiteture}.  
	This is the perfect quote to describe the problem of defining what software architecture is.  
	The reader, you, has just read that line, interpret it and took your own profound meaning from it.  
	This a similar to the scenario of identifying what is deemed to be structurally relevant in a software product.  
	From a high level perspective most people can identify the main structural components of a software product, 
	however as the analysis continues, disagreement lurks, and the resulting definition gets blurred.
	\newline
	\newline
	As architecture is an inherited word from the construction industry, I'm going to go back to the earliest written works on the definition of
	architecture.  De Architectura by the roman architect Vitruvius, said architecture should satisfy three main principles, firmitas, utilitas, venustas,
	or durability, utility and beauty.
	\newline
	\newline
	Dan  known as 'the father of the spreadsheet' wrote a paper, 'software that last 200 years', says that we need to start thinking
	about software in a way that mimics the construction of bridges, dams and sewers.  Since software has only been around for a fraction of this time
	it's hard to determine whether the practices currently employed in software construction are going to stand the test of time.  
	There is still fortran code(1956) running today as well as lisp(1958); however, the only product still running and constantly being evolved is Unix(1959).
	Dan Bricklin makes the argument, a softwares durability is a product of its marketing strategy and that bridges would not be very successful 
	if we tore it down every 10 years.  Unix and its derivatives are successful, along with the GNU (Gnus Not Unix) utils, e.g Emacs 1978. 
	\newline
	\newline
	This brings us to utility, if Unix were not useful, it and its derivatives would have died out long ago.  Its usefulness, in all manor of products
	from embedded systems to desktop pcs and mainframes has been proven.  Vitruvius says that it should useful and provide function to the people 
	using it.
	Beauty, the final principle of architecture according to Vitruvius is concept that changes with culture and time.  The austerity of time proven techniques,
	compared to new paradigms, new design patterns, and concept of beautiful software architecture seems to change like the weather.
	\newline
	\newline
	To satisfy the reader I will finish up with a definition of software architecture according to the most successfully marketed software developers
	Microsoft, \textit{"Software application architecture is the process of defining a structured solution that meets all the technical requirements,
	while optimizing common quality attributes such as performance, security and manageability"}

	\subsection{Software architecture}		
	
	There are many influencing software solutions that have influenced my thinking on software architectures and how they are deemed successful,
	but primarily useful to me and the end users.  Software that exhibits modular or pluggable characteristics allows for a richer user experience.
	Therefore the development of a software product that exhibited these characeristics was a primary concern.  
	Such frameworks as JQuery for Javascript, .Net for rapid application development and CodeIgnitor for PHP have 
	significantly influenced me.  So much that I no longer look to reinvent the wheel but try in most scenarios to avail of mature already 
	established frameworks to create software.
	\newline
	